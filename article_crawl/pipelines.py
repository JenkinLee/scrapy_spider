# -*- coding: utf-8 -*-# Define your item pipelines here## Don't forget to add your pipeline to the ITEM_PIPELINES setting# See: http://doc.scrapy.org/en/latest/topics/item-pipeline.htmlimport jsonfrom time import ctimefrom os import linesepfrom twisted.enterprise import adbapiimport MySQLdb, MySQLdb.cursorsfrom scrapy.pipelines.images import ImagesPipelinefrom scrapy.exporters import JsonItemExporter   #scrapy自带item导出为json方法#自定义json导出class JsonWithEncodingPipeline(object):    def __init__(self):        self.file = open('article.json','w',encoding='utf8')    def process_item(self, item, spider):        lines = json.dumps(dict(item),ensure_ascii=False) + "\n"        self.file.write(lines)        return item    def spider_closed(self, spider):        self.file.close()#调用scrapy提供的json export导出json文件class JsonExporterPipeline(object):    def __init__(self):        self.file = open('ArticleJosnExporter.json','wb')        self.exporter = JsonItemExporter(self.file,encoding='utf8',ensure_ascii=False)        self.exporter.start_exporting()    def spider_closed(self, spider):        self.exporter.finish_exporting()        self.file.close()    def process_item(self, item, spider):        self.exporter.export_item(item)        return item#下载网页图片class ScrapyImagePipeline(ImagesPipeline):    def item_completed(self, results, item, info):        for status,value in results:            cover_path = value.get('path','')        item['cover_path'] = cover_path        return item     #返回itemclass TwistedMySQLPipeline(object):    def __init__(self, dbpool):        self.dbpool = dbpool    @classmethod    def from_settings(cls, setting):        dbparm = dict(            host = setting['MYSQL_HOST'],            user = setting['MYSQL_USER'],            passwd = setting['MYSQL_PASSWD'],            db = setting['MYSQL_DB'],            charset = 'utf8',            cursorclass = MySQLdb.cursors.DictCursor)        dbpool = adbapi.ConnectionPool('MySQLdb', **dbparm)        return cls(dbpool)    def process_item(self, item, spider):        query = self.dbpool.runInteraction(self.do_insert, item)        # query.addErrback(self.handle_err, item, spider)    def handle_err(self, failure, item, spider):        with open('sql_failure.log','w') as f:            f.write('*****Failure log start******{}{}: {}{}'.format(linesep,ctime(),failure,linesep))    def do_insert(self, cursor, item):        ##执行item传递的sql语句        sql_execute = item.insert_sql()        cursor.execute(sql_execute)